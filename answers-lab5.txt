### Question 1
Do you have to do anything else to ensure that this I/O privilege setting is saved and restored properly when you subsequently switch from one environment to another? Why?

Answer: No. Before the CPU switches from the FS environment to kernel either via syscall or interrupt, the hardware will automatically push EFLAGS register on kernel stack. Then kernel will save the EFLAGS register into trapframe. When later restoring the environment, the kernel will pop the environment trapframe and restore the registers including EFLAGS.

### Challenge--Implement Unix-style exec
I implemented exec primarily in lib/exec.c and kern/syscall.c. It's hard to do unix-style exec in exokernel setting because we need to let a user process to replace its own memory, including code segment. So I decide to do it mainly in kernel space. You can probably see from my git diff that it is not a very easy task.

answers-lab5.txt | 21 +++++++++++++++++++++
inc/lib.h        |  5 +++++
inc/syscall.h    |  1 +
kern/env.c       |  2 +-
kern/env.h       |  2 ++
kern/syscall.c   | 86 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
lib/Makefrag     |  3 ++-
lib/exec.c       | 92 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
lib/syscall.c    |  6 ++++++
user/echo.c      |  1 +
user/hello.c     |  7 +++++++
11 files changed, 224 insertions(+), 2 deletions(-)

In exec.c, I implemented a user lib function based on spawn.c. What exec() do is, given a program path and arguments, load the entire binary in memory starting from 0xe0000000. Then it calls a syscall exec with the loaded binary and arguments. The heavy lifting work is done by sys_exec in kern/syscall.c. This function operates in kernel space. It first copies the arguments to a kernel buffer. Then it loads the code from the in-memory version of executable and set up the code segment for the trapped environment. Then it sets up the stack much like what init_stack do in spawn.c. Finally, it resets the eip and esp of the trapped environment and call sched_yield().

To demonstrate my exec, I modified the user program hello.c and let it call exec to execute echo. I also modified echo to print its environment id. The output is as follows,

$ hello
[00002001] new env 00001003
[00001003] new env 00001004
hello, world
i am environment 00001004
Hey, greetings from a new hello by exec
i am environment 00001004
[00001004] exiting gracefully
[00001004] free env 00001004
[00001003] exiting gracefully
[00001003] free env 00001003

As we can see, hello first prints its environment id then executes echo to print "Hey, greetings from a new hello by exec". They share the same environment id indicating that echo is generated by execand not by spawn.
