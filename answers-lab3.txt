### Question 1
What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

A: The purpose of this is to enforce kernel mode protection. We don't want the users to trigger certain handler functions since it will interfere with kernel. But we also want users to trigger certain interrupt handlers in order to make syscalls. So we have an individual handler function for each exception/interrupt and set different priviledges for them.

### Question 2
Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint‘s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint‘s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

A: We did nothing to make softint program behave correctly. The `int 14` produces interrupt vector 13 because the DPL for page fault handler is 0 (kernel priviledge). So when CPU discovers that the user is calling `int 14`, it will trigger the general protection fault, which gives a trap number 13.
